// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "task";

export interface Empty {
}

export interface CreateTaskRequest {
  title: string;
  description: string;
  createdBy: number;
}

export interface CompleteTaskRequest {
  id: number;
}

export interface FindByIdRequest {
  id: number;
}

export interface Task {
  id: number;
  title: string;
  description: string;
  completed: boolean;
  createdBy: number;
  createdAt: string;
}

export interface TaskResponse {
  task: Task | undefined;
}

export interface TasksResponse {
  tasks: Task[];
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseCreateTaskRequest(): CreateTaskRequest {
  return { title: "", description: "", createdBy: 0 };
}

export const CreateTaskRequest: MessageFns<CreateTaskRequest> = {
  encode(message: CreateTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createdBy !== 0) {
      writer.uint32(24).int32(message.createdBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.createdBy = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTaskRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdBy: isSet(object.createdBy) ? globalThis.Number(object.createdBy) : 0,
    };
  },

  toJSON(message: CreateTaskRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdBy !== 0) {
      obj.createdBy = Math.round(message.createdBy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTaskRequest>, I>>(base?: I): CreateTaskRequest {
    return CreateTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTaskRequest>, I>>(object: I): CreateTaskRequest {
    const message = createBaseCreateTaskRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.createdBy = object.createdBy ?? 0;
    return message;
  },
};

function createBaseCompleteTaskRequest(): CompleteTaskRequest {
  return { id: 0 };
}

export const CompleteTaskRequest: MessageFns<CompleteTaskRequest> = {
  encode(message: CompleteTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteTaskRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: CompleteTaskRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompleteTaskRequest>, I>>(base?: I): CompleteTaskRequest {
    return CompleteTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompleteTaskRequest>, I>>(object: I): CompleteTaskRequest {
    const message = createBaseCompleteTaskRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseFindByIdRequest(): FindByIdRequest {
  return { id: 0 };
}

export const FindByIdRequest: MessageFns<FindByIdRequest> = {
  encode(message: FindByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindByIdRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: FindByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindByIdRequest>, I>>(base?: I): FindByIdRequest {
    return FindByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindByIdRequest>, I>>(object: I): FindByIdRequest {
    const message = createBaseFindByIdRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseTask(): Task {
  return { id: 0, title: "", description: "", completed: false, createdBy: 0, createdAt: "" };
}

export const Task: MessageFns<Task> = {
  encode(message: Task, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.completed !== false) {
      writer.uint32(32).bool(message.completed);
    }
    if (message.createdBy !== 0) {
      writer.uint32(40).int32(message.createdBy);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Task {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.completed = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.createdBy = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Task {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      completed: isSet(object.completed) ? globalThis.Boolean(object.completed) : false,
      createdBy: isSet(object.createdBy) ? globalThis.Number(object.createdBy) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: Task): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.completed !== false) {
      obj.completed = message.completed;
    }
    if (message.createdBy !== 0) {
      obj.createdBy = Math.round(message.createdBy);
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Task>, I>>(base?: I): Task {
    return Task.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Task>, I>>(object: I): Task {
    const message = createBaseTask();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.completed = object.completed ?? false;
    message.createdBy = object.createdBy ?? 0;
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseTaskResponse(): TaskResponse {
  return { task: undefined };
}

export const TaskResponse: MessageFns<TaskResponse> = {
  encode(message: TaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      Task.encode(message.task, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = Task.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskResponse {
    return { task: isSet(object.task) ? Task.fromJSON(object.task) : undefined };
  },

  toJSON(message: TaskResponse): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = Task.toJSON(message.task);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskResponse>, I>>(base?: I): TaskResponse {
    return TaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskResponse>, I>>(object: I): TaskResponse {
    const message = createBaseTaskResponse();
    message.task = (object.task !== undefined && object.task !== null) ? Task.fromPartial(object.task) : undefined;
    return message;
  },
};

function createBaseTasksResponse(): TasksResponse {
  return { tasks: [] };
}

export const TasksResponse: MessageFns<TasksResponse> = {
  encode(message: TasksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tasks) {
      Task.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TasksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTasksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tasks.push(Task.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TasksResponse {
    return { tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e: any) => Task.fromJSON(e)) : [] };
  },

  toJSON(message: TasksResponse): unknown {
    const obj: any = {};
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => Task.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TasksResponse>, I>>(base?: I): TasksResponse {
    return TasksResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TasksResponse>, I>>(object: I): TasksResponse {
    const message = createBaseTasksResponse();
    message.tasks = object.tasks?.map((e) => Task.fromPartial(e)) || [];
    return message;
  },
};

export type TaskServiceService = typeof TaskServiceService;
export const TaskServiceService = {
  createTask: {
    path: "/task.TaskService/CreateTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateTaskRequest): Buffer => Buffer.from(CreateTaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateTaskRequest => CreateTaskRequest.decode(value),
    responseSerialize: (value: TaskResponse): Buffer => Buffer.from(TaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): TaskResponse => TaskResponse.decode(value),
  },
  findAllTasks: {
    path: "/task.TaskService/FindAllTasks",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: TasksResponse): Buffer => Buffer.from(TasksResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): TasksResponse => TasksResponse.decode(value),
  },
  completeTask: {
    path: "/task.TaskService/CompleteTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CompleteTaskRequest): Buffer => Buffer.from(CompleteTaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CompleteTaskRequest => CompleteTaskRequest.decode(value),
    responseSerialize: (value: TaskResponse): Buffer => Buffer.from(TaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): TaskResponse => TaskResponse.decode(value),
  },
  findTaskById: {
    path: "/task.TaskService/FindTaskById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindByIdRequest): Buffer => Buffer.from(FindByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): FindByIdRequest => FindByIdRequest.decode(value),
    responseSerialize: (value: TaskResponse): Buffer => Buffer.from(TaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): TaskResponse => TaskResponse.decode(value),
  },
} as const;

export interface TaskServiceServer extends UntypedServiceImplementation {
  createTask: handleUnaryCall<CreateTaskRequest, TaskResponse>;
  findAllTasks: handleUnaryCall<Empty, TasksResponse>;
  completeTask: handleUnaryCall<CompleteTaskRequest, TaskResponse>;
  findTaskById: handleUnaryCall<FindByIdRequest, TaskResponse>;
}

export interface TaskServiceClient extends Client {
  createTask(
    request: CreateTaskRequest,
    callback: (error: ServiceError | null, response: TaskResponse) => void,
  ): ClientUnaryCall;
  createTask(
    request: CreateTaskRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TaskResponse) => void,
  ): ClientUnaryCall;
  createTask(
    request: CreateTaskRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TaskResponse) => void,
  ): ClientUnaryCall;
  findAllTasks(
    request: Empty,
    callback: (error: ServiceError | null, response: TasksResponse) => void,
  ): ClientUnaryCall;
  findAllTasks(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TasksResponse) => void,
  ): ClientUnaryCall;
  findAllTasks(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TasksResponse) => void,
  ): ClientUnaryCall;
  completeTask(
    request: CompleteTaskRequest,
    callback: (error: ServiceError | null, response: TaskResponse) => void,
  ): ClientUnaryCall;
  completeTask(
    request: CompleteTaskRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TaskResponse) => void,
  ): ClientUnaryCall;
  completeTask(
    request: CompleteTaskRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TaskResponse) => void,
  ): ClientUnaryCall;
  findTaskById(
    request: FindByIdRequest,
    callback: (error: ServiceError | null, response: TaskResponse) => void,
  ): ClientUnaryCall;
  findTaskById(
    request: FindByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TaskResponse) => void,
  ): ClientUnaryCall;
  findTaskById(
    request: FindByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TaskResponse) => void,
  ): ClientUnaryCall;
}

export const TaskServiceClient = makeGenericClientConstructor(TaskServiceService, "task.TaskService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TaskServiceClient;
  service: typeof TaskServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
