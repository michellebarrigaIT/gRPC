// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, Metadata, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "task";

export interface Empty {
}

export interface CreateTaskRequest {
  title: string;
  description: string;
  createdBy: number;
}

export interface CompleteTaskRequest {
  id: number;
}

export interface FindByIdRequest {
  id: number;
}

export interface Task {
  id: number;
  title: string;
  description: string;
  completed: boolean;
  createdBy: number;
  createdAt: string;
}

export interface TaskResponse {
  task: Task | undefined;
}

export interface TasksResponse {
  tasks: Task[];
}

export interface UpdateTaskRequest {
  id: number;
  title: string;
  description: string;
  completed: boolean;
  createdBy: number;
}

export const TASK_PACKAGE_NAME = "task";

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateTaskRequest(): CreateTaskRequest {
  return { title: "", description: "", createdBy: 0 };
}

export const CreateTaskRequest: MessageFns<CreateTaskRequest> = {
  encode(message: CreateTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createdBy !== 0) {
      writer.uint32(24).int32(message.createdBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.createdBy = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCompleteTaskRequest(): CompleteTaskRequest {
  return { id: 0 };
}

export const CompleteTaskRequest: MessageFns<CompleteTaskRequest> = {
  encode(message: CompleteTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFindByIdRequest(): FindByIdRequest {
  return { id: 0 };
}

export const FindByIdRequest: MessageFns<FindByIdRequest> = {
  encode(message: FindByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseTask(): Task {
  return { id: 0, title: "", description: "", completed: false, createdBy: 0, createdAt: "" };
}

export const Task: MessageFns<Task> = {
  encode(message: Task, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.completed !== false) {
      writer.uint32(32).bool(message.completed);
    }
    if (message.createdBy !== 0) {
      writer.uint32(40).int32(message.createdBy);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Task {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.completed = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.createdBy = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseTaskResponse(): TaskResponse {
  return { task: undefined };
}

export const TaskResponse: MessageFns<TaskResponse> = {
  encode(message: TaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      Task.encode(message.task, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = Task.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseTasksResponse(): TasksResponse {
  return { tasks: [] };
}

export const TasksResponse: MessageFns<TasksResponse> = {
  encode(message: TasksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tasks) {
      Task.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TasksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTasksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tasks.push(Task.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateTaskRequest(): UpdateTaskRequest {
  return { id: 0, title: "", description: "", completed: false, createdBy: 0 };
}

export const UpdateTaskRequest: MessageFns<UpdateTaskRequest> = {
  encode(message: UpdateTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.completed !== false) {
      writer.uint32(32).bool(message.completed);
    }
    if (message.createdBy !== 0) {
      writer.uint32(40).int32(message.createdBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.completed = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.createdBy = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface TaskServiceClient {
  createTask(request: CreateTaskRequest, metadata?: Metadata): Observable<TaskResponse>;

  findAllTasks(request: Empty, metadata?: Metadata): Observable<TasksResponse>;

  completeTask(request: CompleteTaskRequest, metadata?: Metadata): Observable<TaskResponse>;

  findTaskById(request: FindByIdRequest, metadata?: Metadata): Observable<TaskResponse>;

  updateTask(request: UpdateTaskRequest, metadata?: Metadata): Observable<TaskResponse>;

  removeTask(request: FindByIdRequest, metadata?: Metadata): Observable<Empty>;
}

export interface TaskServiceController {
  createTask(
    request: CreateTaskRequest,
    metadata?: Metadata,
  ): Promise<TaskResponse> | Observable<TaskResponse> | TaskResponse;

  findAllTasks(request: Empty, metadata?: Metadata): Promise<TasksResponse> | Observable<TasksResponse> | TasksResponse;

  completeTask(
    request: CompleteTaskRequest,
    metadata?: Metadata,
  ): Promise<TaskResponse> | Observable<TaskResponse> | TaskResponse;

  findTaskById(
    request: FindByIdRequest,
    metadata?: Metadata,
  ): Promise<TaskResponse> | Observable<TaskResponse> | TaskResponse;

  updateTask(
    request: UpdateTaskRequest,
    metadata?: Metadata,
  ): Promise<TaskResponse> | Observable<TaskResponse> | TaskResponse;

  removeTask(request: FindByIdRequest, metadata?: Metadata): Promise<Empty> | Observable<Empty> | Empty;
}

export function TaskServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createTask",
      "findAllTasks",
      "completeTask",
      "findTaskById",
      "updateTask",
      "removeTask",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TaskService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TaskService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TASK_SERVICE_NAME = "TaskService";

export type TaskServiceService = typeof TaskServiceService;
export const TaskServiceService = {
  createTask: {
    path: "/task.TaskService/CreateTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateTaskRequest): Buffer => Buffer.from(CreateTaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateTaskRequest => CreateTaskRequest.decode(value),
    responseSerialize: (value: TaskResponse): Buffer => Buffer.from(TaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): TaskResponse => TaskResponse.decode(value),
  },
  findAllTasks: {
    path: "/task.TaskService/FindAllTasks",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: TasksResponse): Buffer => Buffer.from(TasksResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): TasksResponse => TasksResponse.decode(value),
  },
  completeTask: {
    path: "/task.TaskService/CompleteTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CompleteTaskRequest): Buffer => Buffer.from(CompleteTaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CompleteTaskRequest => CompleteTaskRequest.decode(value),
    responseSerialize: (value: TaskResponse): Buffer => Buffer.from(TaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): TaskResponse => TaskResponse.decode(value),
  },
  findTaskById: {
    path: "/task.TaskService/FindTaskById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindByIdRequest): Buffer => Buffer.from(FindByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): FindByIdRequest => FindByIdRequest.decode(value),
    responseSerialize: (value: TaskResponse): Buffer => Buffer.from(TaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): TaskResponse => TaskResponse.decode(value),
  },
  updateTask: {
    path: "/task.TaskService/UpdateTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateTaskRequest): Buffer => Buffer.from(UpdateTaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateTaskRequest => UpdateTaskRequest.decode(value),
    responseSerialize: (value: TaskResponse): Buffer => Buffer.from(TaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): TaskResponse => TaskResponse.decode(value),
  },
  removeTask: {
    path: "/task.TaskService/RemoveTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindByIdRequest): Buffer => Buffer.from(FindByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): FindByIdRequest => FindByIdRequest.decode(value),
    responseSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer): Empty => Empty.decode(value),
  },
} as const;

export interface TaskServiceServer extends UntypedServiceImplementation {
  createTask: handleUnaryCall<CreateTaskRequest, TaskResponse>;
  findAllTasks: handleUnaryCall<Empty, TasksResponse>;
  completeTask: handleUnaryCall<CompleteTaskRequest, TaskResponse>;
  findTaskById: handleUnaryCall<FindByIdRequest, TaskResponse>;
  updateTask: handleUnaryCall<UpdateTaskRequest, TaskResponse>;
  removeTask: handleUnaryCall<FindByIdRequest, Empty>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
